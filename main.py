# Block_1---------------------------------------
# !pip install pytelegrambotapi -q
# !pip install diffusers -q
# !pip install deep-translator -q
#
# !pip install -U g4f --quiet
# !pip install browser-cookie3 --quiet
# !pip install aiohttp_socks --quiet

# Block_2---------------------------------------
import telebot;
bot = telebot.TeleBot('Your token here'); #Telegram bot token from BotFather
from telebot import types
from deep_translator import GoogleTranslator
import g4f
from g4f.Provider import (
    GeekGpt,
    Liaobots,
    Phind,
    Raycast,
    RetryProvider)
from g4f.client import Client
import nest_asyncio
from diffusers import DiffusionPipeline
import torch

# Block_3---------------------------------------
# GPT4
nest_asyncio.apply()

client = Client(
    provider=RetryProvider([
        g4f.Provider.Liaobots,
        g4f.Provider.GeekGpt,
        g4f.Provider.Phind,
        g4f.Provider.Raycast,
        g4f.Provider.BaseProvider,
        g4f.Provider.Bing,
        g4f.Provider.OpenaiChat

    ])
)
chat_history = [{"role": "user", "content": '–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ '}]

# Block_4---------------------------------------
def send_request(message):
    global chat_history
    chat_history[0]["content"] += message + " "

    try:
        response = g4f.ChatCompletion.create(
        model=g4f.models.gpt_4,
        messages=chat_history
    )
    except Exception as err:
        print("–í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–π–∑–∂–µ")
    chat_history[0]["content"] += response + " "
    return response


# Block_5---------------------------------------
#–∫–∞—Ä—Ç–∏–Ω–∫–∞
def send_photo(message):
    base = DiffusionPipeline.from_pretrained(
        "stabilityai/stable-diffusion-xl-base-1.0", torch_dtype=torch.float16, variant="fp16", use_safetensors=True)

    base.to("cuda")
    refiner = DiffusionPipeline.from_pretrained(
        "stabilityai/stable-diffusion-xl-refiner-1.0",
        text_encoder_2=base.text_encoder_2,
        vae=base.vae,
        torch_dtype=torch.float16,
        use_safetensors=True,
        variant="fp16", )
    refiner.to("cuda")


    n_steps = 40
    high_noise_frac = 0.8

    prompt = message

    image = base(
        prompt=prompt,
        num_inference_steps=n_steps,
        denoising_end=high_noise_frac,
        output_type="latent", ).images
    image = refiner(
        prompt=prompt,
        num_inference_steps=n_steps,
        denoising_start=high_noise_frac,
        image=image, ).images[0]
    return image

# Block_6---------------------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞, —Å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ–º, –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü—Ä–∏–≤–µ—Ç")
    btn2 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ—à—å —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –º–µ–Ω—è! –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def func(message):
    if (message.text == "üëã –ü—Ä–∏–≤–µ—Ç"):
        bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å—å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –º–Ω–æ—é <3")
    elif (message.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        btn2 = types.KeyboardButton("–ß—Ç–æ —è –º–æ–≥—É?")
        back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(btn1, btn2, back)
        bot.send_message(message.chat.id, text="–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å", reply_markup=markup)

    elif (message.text == "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"):
        bot.send_message(message.chat.id, "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ì—É—Å—å. –Ø —Å–∞–º—ã–π —É–º–Ω—ã–π –≥—É—Å—å!")

    elif message.text == "–ß—Ç–æ —è –º–æ–≥—É?":
        bot.send_message(message.chat.id,
                         text="–Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª—é–±–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")

    elif (message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("üëã –ü—Ä–∏–≤–µ—Ç")
        button2 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
        markup.add(button1, button2)
        bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
    else:
        inp = GoogleTranslator(source='auto', target='en').translate(message.text)
        inp1 = "Tell me about technology of " + inp
        print(inp1)
        out = GoogleTranslator(source='auto', target='ru').translate(send_request(inp1))
        puu = "photo of the " + inp
        print(puu)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
        bot.send_message(message.chat.id, out)
        bot.send_message(message.chat.id, text="–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –∏ —è —Å–≥–µ–Ω–∏—Ä–∏—Ä—É—é —Ç–µ–±–µ –∫–∞—Ä—Ç–∏–Ω–∫—É ‚ô•")
        bot.send_photo(message.chat.id, send_photo(inp))


bot.polling(none_stop=True, interval=0)
